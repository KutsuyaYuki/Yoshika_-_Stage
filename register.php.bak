<?php

$thisPage = "Register";

// First we execute our common code to connection to the database and start the session
require("logic/common.php");

// This if statement checks to determine whether the registration form has been submitted
// If it has, then the registration code is run, otherwise the form is displayed
if (!empty($_POST)) {
    // Ensure that the user has entered a non-empty username
    if (empty($_POST['user'])) {
        // Note that die() is generally a terrible way of handling user errors
        // like this.  It is much better to display the error with the form
        // and allow the user to correct their mistake.  However, that is an
        // exercise for you to implement yourself.
        die("Please enter a username.");
    }

    // Ensure that the user has entered a non-empty password
    if (empty($_POST['password'])) {
        die("Please enter a password.");
    }

    // Make sure the user entered a valid E-Mail address
    // filter_var is a useful PHP function for validating form input, see:
    // http://us.php.net/manual/en/function.filter-var.php
    // http://us.php.net/manual/en/filter.filters.php
    if (!filter_var($_POST['email'], FILTER_VALIDATE_EMAIL)) {
        die("Invalid E-Mail Address");
    }

    // We will use this SQL query to see whether the username entered by the
    // user is already in use.  A SELECT query is used to retrieve data from the database.
    // :username is a special token, we will substitute a real value in its place when
    // we execute the query.
    $query = "
            SELECT
                1
            FROM users
            WHERE
                user = :user
        ";

    // This contains the definitions for any special tokens that we place in
    // our SQL query.  In this case, we are defining a value for the token
    // :username.  It is possible to insert $_POST['username'] directly into
    // your $query string; however doing so is very insecure and opens your
    // code up to SQL injection exploits.  Using tokens prevents this.
    // For more information on SQL injections, see Wikipedia:
    // http://en.wikipedia.org/wiki/SQL_Injection
    $query_params = array(
        ':user' => $_POST['user']
    );

    try {
        // These two statements run the query against your database table.
        $stmt = $db->prepare($query);
        $result = $stmt->execute($query_params);
    } catch (PDOException $ex) {
        // Note: On a production website, you should not output $ex->getMessage().
        // It may provide an attacker with helpful information about your code.
        die("Failed to run query: " . $ex->getMessage());
    }

    // The fetch() method returns an array representing the "next" row from
    // the selected results, or false if there are no more rows to fetch.
    $row = $stmt->fetch();

    // If a row was returned, then we know a matching username was found in
    // the database already and we should not allow the user to continue.
    if ($row) {
        die("This username is already in use");
    }

    // Now we perform the same type of check for the email address, in order
    // to ensure that it is unique.
    $query = "
            SELECT
                1
            FROM contact
            WHERE
                email = :email
        ";

    $query_params = array(
        ':email' => $_POST['email']
    );

    try {
        $stmt = $db->prepare($query);
        $result = $stmt->execute($query_params);
    } catch (PDOException $ex) {
        die("Failed to run query: " . $ex->getMessage());
    }

    $row = $stmt->fetch();

    if ($row) {
        die("This email address is already registered");
    }

    // An INSERT query is used to add new rows to a database table.
    // Again, we are using special tokens (technically called parameters) to
    // protect against SQL injection attacks.
    $query = "
            INSERT INTO users (
                user,
                password,
                salt
            ) VALUES (
                :user,
                :password,
                :salt
            )
        ";

    // A salt is randomly generated here to protect again brute force attacks
    // and rainbow table attacks.  The following statement generates a hex
    // representation of an 8 byte salt.  Representing this in hex provides
    // no additional security, but makes it easier for humans to read.
    // For more information:
    // http://en.wikipedia.org/wiki/Salt_%28cryptography%29
    // http://en.wikipedia.org/wiki/Brute-force_attack
    // http://en.wikipedia.org/wiki/Rainbow_table
    $salt = dechex(mt_rand(0, 2147483647)) . dechex(mt_rand(0, 2147483647));

    // This hashes the password with the salt so that it can be stored securely
    // in your database.  The output of this next statement is a 64 byte hex
    // string representing the 32 byte sha256 hash of the password.  The original
    // password cannot be recovered from the hash.  For more information:
    // http://en.wikipedia.org/wiki/Cryptographic_hash_function
    $password = hash('sha256', $_POST['password'] . $salt);

    // Next we hash the hash value 65536 more times.  The purpose of this is to
    // protect against brute force attacks.  Now an attacker must compute the hash 65537
    // times for each guess they make against a password, whereas if the password
    // were hashed only once the attacker would have been able to make 65537 different
    // guesses in the same amount of time instead of only one.
    for ($round = 0; $round < 65536; $round++) {
        $password = hash('sha256', $password . $salt);
    }

    // Here we prepare our tokens for insertion into the SQL query.  We do not
    // store the original password; only the hashed version of it.  We do store
    // the salt (in its plaintext form; this is not a security risk).
    $query_params = array(
        ':user' => $_POST['user'],
        ':password' => $password,
        ':salt' => $salt
    );

    try {
        // Execute the query to create the user
        $stmt = $db->prepare($query);
        $result = $stmt->execute($query_params);
        $last_id = $db->lastInsertId();
    } catch (PDOException $ex) {
        // Note: On a production website, you should not output $ex->getMessage().
        // It may provide an attacker with helpful information about your code.
        die("Failed to run query: " . $ex->getMessage());
    }

    /* Email */
    $query_contact = "
            INSERT INTO contact (
            id,
            woonplaats,
            woonadres,
            postadres,
            postcode,
            email,
            telefoonnummer,
            mobielenummer
            ) VALUES (
            :id,
            :woonplaats,
            :woonadres,
            :postcode,
            :postadres,
            :email,
            :telefoonnummer,
            :mobielenummer
            )
        ";

    $query_contact_params = array(
        ':id' => $last_id,
        ':woonplaats' => $_POST['woonplaats'],
        ':woonadres' => $_POST['woonadres'],
        ':postadres' => $_POST['postadres'],
        ':postcode' => $_POST['postcode'],
        ':email' => $_POST['email'],
        ':telefoonnummer' => $_POST['telefoonnummer'],
        ':mobielenummer' => $_POST['mobielenummer']

    );

    try {
        // Execute the query to create the user
        $stmt = $db->prepare($query_contact);
        $result = $stmt->execute($query_contact_params);
    } catch (PDOException $ex) {
        // Note: On a production website, you should not output $ex->getMessage().
        // It may provide an attacker with helpful information about your code.
        die("Failed to run query: " . $ex->getMessage());
    }

    /* End Email */

    /* Categorie */
    $query_categorie = "
            INSERT INTO categorie (
            id,
            name
            ) VALUES (
            :id,
            :name
            )
        ";

    $query_categorie_params = array(
        ':id' => $last_id,
        ':name' => $_POST['categorie']

    );

    try {
        // Execute the query to create the user
        $stmt = $db->prepare($query_categorie);
        $result = $stmt->execute($query_categorie_params);
    } catch (PDOException $ex) {
        // Note: On a production website, you should not output $ex->getMessage().
        // It may provide an attacker with helpful information about your code.
        die("Failed to run query: " . $ex->getMessage());
    }

    /* End Categorie */

    // This redirects the user back to the login page after they register
    header("Location: login.php");

    // Calling die or exit after performing a redirect using the header function
    // is critical.  The rest of your PHP script will continue to execute and
    // will be sent to the user if you do not die or exit.
    die("Redirecting to login.php");
}

/*  // First we execute our common code to connection to the database and start the session
    require("logic/common.php");
    include("logic/classes/Users.inc");
    $Users = new Users();

    // This if statement checks to determine whether the registration form has been submitted
    // If it has, then the registration code is run, otherwise the form is displayed
    if(!empty($_POST))
    {
        // Ensure that the user has entered a non-empty user
        if(empty($_POST['user']))
        {
            // Note that die() is generally a terrible way of handling user errors
            // like this.  It is much better to display the error with the form
            // and allow the user to correct their mistake.  However, that is an
            // exercise for you to implement yourself.
            die("Please enter a user.");
        }

        // Ensure that the user has entered a non-empty password
        if(empty($_POST['password']))
        {
            die("Please enter a password.");
        }

        $Users->Register($_POST['user'], $_POST['password']);


    }
*/
?>
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">

<!DOCTYPE html>
<html>
<head>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js"></script>
    <script src="js/bootstrap.js"></script>
    <link href="css/bootstrap.css" rel="stylesheet" type="text/css" media="screen"/>
    <link href="css/style.css" rel="stylesheet" type="text/css" media="screen"/>
    <title>Yuki's Site ~</title>
</head>
<body>

<!-- Content -->
<div class="header">
    <?php include "logic/classes/menu_top.inc"; ?>
</div>
<div class="wrapper">
    <!-- Content !-->
    <div class="content">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h3 class="panel-title">Register</h3>
            </div>
            <div class="panel-body">
                <form class="form-horizontal" action="register.php" method="post">

                    <div class="form-group">
                        <div class="col-sm-2">
                            <span class="input-group-sm">Username</span>
                            <input type="text" name="user" class="form-control" id="inputUsername"
                                   placeholder="Username">
                        </div>
                        <div class="col-sm-2">
                            <span class="input-group-sm">Password</span>
                            <input type="password" name="password" class="form-control" id="inputPassword"
                                   placeholder="Password">
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-sm-2">
                            <span class="input-group-sm">Email</span>
                            <input type="email" name="email" class="form-control" id="inputEmail" placeholder="Email">
                        </div>
                        <div class="col-sm-2">
                            <span class="input-group-sm">Woonplaats</span>
                            <input type="woonplaats" name="woonplaats" class="form-control" id="inputWoonplaats"
                                   placeholder="Woonplaats">
                        </div>
                        <div class="col-sm-2">
                            <span class="input-group-sm">Woonadres</span>
                            <input type="woonadres" name="woonadres" class="form-control" id="inputWoonadres"
                                   placeholder="Woonadres">
                        </div>
                        <div class="col-sm-2">
                            <span class="input-group-sm">Postadres</span>
                            <input type="postadres" name="postadres" class="form-control" id="inputPostadres"
                                   placeholder="Postadres">
                        </div>
                        <div class="col-sm-2">
                            <span class="input-group-sm">Postcode</span>
                            <input type="postcode" name="postcode" class="form-control" id="inputPostcode"
                                   placeholder="Postcode">
                        </div>
                        <div class="col-sm-2">
                            <span class="input-group-sm">Telefoonnummer</span>
                            <input type="telefoonnummer" name="telefoonnummer" class="form-control" id="inputTelefoonnummer"
                                   placeholder="Telefoonnummer">
                        </div>
                        <div class="col-sm-2">
                            <span class="input-group-sm">Mobielenummer</span>
                            <input type="mobielenummer" name="mobielenummer" class="form-control" id="inputMobielenummer"
                                   placeholder="Mobielenummer">
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-sm-2">
                            <span class="input-group-sm">Categorie</span>
                            <select name="categorie" id="inputCategorie" class="form-control">
                                <option value="Eigenaar">Eigenaar</option>
                                <option value="Administratie">Administratie</option>
                                <option value="Werknemer">Werknemer</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-2">
                            <button type="submit" class="btn btn-submit">Register</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <div class="cleared"></div>
</div>
<!-- Footer !-->
<nav class="navbar navbar-default navbar-fixed-bottom">
    <div class="container">
        <p class="text-center">Copyright stuff ~</p>
    </div>
</nav>

</body>
</html>
